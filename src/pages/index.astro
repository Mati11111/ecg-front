---
import Layout from "@/layouts/Layout.astro";
import { execFile } from "child_process";
import { getBackendUrl } from "@/assets/getBackendUrl.astro";

import PlotSignals from "@/components/PlotSignals.tsx";
import ProcessPrediction from "@/components/ProcessPrediction";
import RunButton from "@/components/RunButton.tsx";

const backendUrl = getBackendUrl();
let ecgData: { labels: string[]; values: number[] } = {
  labels: [],
  values: [],
};

let predictionData: {
  labels: string[];
  values: number[];
  predictedClasses: (string | number | null)[];
} = { labels: [], values: [], predictedClasses: [] };

export const prerender = false;

let serverStatus = "DISCONNECTED";
let bpmValue = 0;

if (Astro.request?.method === "POST") {
  const bodyText = await Astro.request.text();

  let payload;
  try {
    payload = JSON.parse(bodyText);
  } catch (e) {
    console.error("JSON invÃ¡lido:", e);
    return new Response("Invalid JSON", { status: 400 });
  }

  const commitMessage = payload.commits[0].message || "No commit message";

  console.log("Commit recibido:", commitMessage);

  execFile("./pullGitRepo.sh", [commitMessage], (error, stdout, stderr) => {
    if (error) {
      console.error(`Error ejecutando script: ${error.message}`);
      return;
    }
    if (stderr) {
      console.error(`stderr: ${stderr}`);
      return;
    }
    console.log(`stdout: ${stdout}`);
  });

  return new Response(commitMessage, {
    status: 200,
    headers: { "Content-Type": "text/plain" },
  });
}

// get server status
try {
  const res = await fetch(`${backendUrl}/health`);
  const data = await res.json();
  if (data.ok) serverStatus = "CONNECTED";
} catch (e: any) {
  serverStatus = "DISCONNECTED";
}

// get bpm
try {
  const res = await fetch(`${backendUrl}/bpm`);
  const data = await res.json();
  if (data.bpm) bpmValue = data.bpm;
} catch (e: any) {
  bpmValue = 0;
}
// get ecg data
try {
  const res = await fetch(`${backendUrl}/ecg`);
  const data = await res.json();
  ecgData = {
    labels: data.map((d: any) => d.timestamp),
    values: data.map((d: any) => d.value),
  };
} catch (e: any) {
  console.error("Error fetching ECG data:", e);
  ecgData = { labels: [], values: [] };
}
` `;

// get prediction data
try {
  const res = await fetch(`${backendUrl}/sendPrediction`);
  const data = await res.json();

  const firstPrediction = data.predictions[0];
  const entries = Object.entries(firstPrediction).filter(
    ([key]) => key !== "Predicted_Class",
  );

  const labels = entries.map(([key]) => key);

  const values = data.predictions.map((pred: any) => {
    const entries = Object.entries(pred).filter(
      ([key]) => key !== "Predicted_Class",
    );
    return entries.map(([_, value]) => Number(value));
  });

  const predictedClasses = data.predictions.map(
    (pred: any) => pred.Predicted_Class ?? null,
  );

  const classCounts: Record<string, number> = {};
  predictedClasses.forEach((cls: string | number | null) => {
    if (cls !== null) {
      classCounts[cls] = (classCounts[cls] || 0) + 1;
    }
  });

  const classLabels = Object.keys(classCounts);
  const classValues = Object.values(classCounts);

  predictionData = {
    labels: classLabels,
    values: classValues,
    predictedClasses,
  };
} catch (e: any) {
  console.error("Error fetching ECG data:", e);
  predictionData = { labels: [], values: [], predictedClasses: [] };
}
---

<Layout>
  <div
    id="background"
    class="bg-[#666161] min-h-[100vh] m-2 flex items-center justify-center"
  >
    <div class="flex w-full h-full">
      <div id="left-container" class="flex w-1/2">
        <div
          id="upper-container"
          class="bg-black bg-opacity-60 rounded-lg m-3 p-5 flex flex-col items-center justify-center"
        >
          <div class="flex flex-row w-full items-center justify-center">
            <div id="bpm-electrodes-container" class="flex flex-col">
              <div id="bpm-container" class="flex flex-col items-center h-full">
                <p class="text-4xl p-3 font-bold text-white">BPM</p>
                <p class="text-4xl p-3 font-bold text-white">{bpmValue}</p>
              </div>
              <div id="electrodes-container" class="flex flex-col items-center">
                <div class="flex flex-row items-center">
                  <p class="text-4xl p-3 font-bold text-white">R</p>
                  <img
                    src="/dotfilled.svg"
                    alt="Heart Icon"
                    class="w-20 h-20"
                  />
                </div>
              </div>
            </div>
            <div
              id="signals-container"
              class="w-full h-[400px] m-5 bg-black rounded"
            >
              <PlotSignals client:load ecgData={ecgData} />
            </div>
            <div
              id="bpm-electrodes-container"
              class="flex flex-col justify-between"
            >
              <div id="bpm-container" class="flex flex-col items-center h-full">
                <p class="text-4xl p-3 font-bold text-white">AGE</p>
                <p class="text-4xl p-3 font-bold text-white">18</p>
              </div>

              <div id="electrodes-container" class="flex flex-col items-center">
                <p class="text-4xl p-3 font-bold text-white">WEIGHT</p>
                <p class="text-4xl p-3 font-bold text-white">62.5</p>
                <p class="text-4xl p-3 font-bold text-white mb-4">MALE</p>
              </div>
            </div>
          </div>
          <div class="flex flex-row">
            <div class="items-center justify-center gap-4 mt-4 -ml-10">
              <button
                class="bg-[#ffffff] bg-opacity-60 font-bold text-white px-6 py-2"
                >STOP</button
              >
              <button
                class="bg-[#000000] bg-opacity-60 font-bold text-white px-6 py-2"
                >START</button
              >
            </div>
            <p class="text-4xl p-3 font-bold text-white">00:00</p>
          </div>
        </div>
      </div>
      <div id="right-container" class="flex flex-col w-1/2 h-full">
        <div id="lower-container" class="bg-black bg-opacity-60 rounded-lg m-3">
          <p class="text-4xl p-5 font-bold text-white">
            ECG Heartbeat Categorization
          </p>
          <div>
            <div class="flex flex-row h-full -mb-5">
              <div
                id="signals-container"
                class="bg-black w-3/4 h-[90%] mb-5 m-5"
              >
                <ProcessPrediction client:load ecgData={predictionData} />
              </div>
              <div class="flex flex-col items-center justify-center w-1/4">
                <p class="text-3xl p-5 pb-0 font-bold text-white">SERVER</p>
                <p class="text-3xl p-5 pt-0 font-bold text-white">STATUS</p>
                <p class="text-1xl p-5 font-bold text-white">{serverStatus}</p>
                <RunButton client:load backendUrl={backendUrl} />
              </div>
            </div>
            <p class="text-1sm p-5 ml-2 font-bold text-white w-3/4">
              Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do
              eiusmod tempor incididunt ut labore et dolore magna aliqua. Lorem
              ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod
              tempor incididunt ut labore et dolore magna aliqua.
            </p>
          </div>
        </div>
      </div>
    </div>
  </div>
</Layout>
